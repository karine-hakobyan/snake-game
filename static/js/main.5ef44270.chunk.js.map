{"version":3,"sources":["Snake.js","Food.js","GameRules.js","App.js","index.js"],"names":["props","snakeCoordinates","map","coord","i","style","left","top","className","key","GameRules","textAlign","randomCoordinates","Math","floor","random","initState","score","speed","speedButtonName","intervalId","ifSpeedSelectDisabled","food","direction","App","selectSpeed","eventKey","setState","onKeyPress","e","window","event","keyCode","moveSnake","snake","state","head","length","push","shift","increaseSpeed","s","clearInterval","setInterval","bind","startButton","checkIfBorderCrossing","checkIfEatItself","checkIfEatFood","enlargeSnake","increaseScore","gameOver","this","document","body","onkeydown","alert","pop","forEach","newSnake","unshift","DropdownButton","title","disabled","Dropdown","Item","onSelect","onClick","Snake","Food","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5ef44270.chunk.js","sourcesContent":["import React from 'react';\n\nexport default (props) => {\n    return (\n        <div>\n            {props.snakeCoordinates.map((coord, i) => {\n                const style = {\n                    left: `${coord[0]}%`,\n                    top: `${coord[1]}%`\n                }\n                return (\n                    <div className='snake-coord' key={i} style={style}></div>\n                )\n            })}\n        </div>\n    )\n}","import React from 'react';\n\nexport default (props) => {\n    const style = {\n        left: `${props.coord[0]}%`,\n        top: `${props.coord[1]}%`\n    }\n    return (\n        <div className=\"snake-food\" style={style}>\n        </div>\n    )\n}","import React from 'react';\n\nconst GameRules = () => {\n    return(\n        <p className='game-rules-content' style={{ textAlign: 'center' }}>Game rules: <br/>\n          This is a simple Snake game. After eating the food your score will increase by 1. \n          Also snake's speed and length will increase.\n          'Game over' is announced when the snake go out of borders or when it eats itself.<br/>\n          Now choose your speed and start the game.\n        </p>\n    )\n}\n\nexport default GameRules;","import React, { Component } from 'react';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Snake from './Snake';\nimport Food from \"./Food\";\nimport GameRules from \"./GameRules\";\n\n\n// Returning a random integer between min (inclusive) and max (inclusive).\n// Used for food coordinates\n// TODO: Add a check so food does not appear on the snake\nconst randomCoordinates = () => {\n  let min = 1;\n  let max = 100;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y]\n}\n\n// Set the default values for state variables\nconst initState = {\n  score: 0,\n  speed: 200,\n  speedButtonName: 'Select the speed',\n  intervalId: null,\n  ifSpeedSelectDisabled: false,\n  food: randomCoordinates(),\n  direction: 'RIGHT',\n  snakeCoordinates: [\n    [0, 0],\n    [2, 0]\n  ]\n}\n\n\nclass App extends Component {\n  \n  constructor(){\n    super();\n\n    this.state = initState;\n\n    this.selectSpeed = this.selectSpeed.bind(this);\n    this.startButton = this.startButton.bind(this);\n    this.onKeyPress = this.onKeyPress.bind(this);\n    this.moveSnake = this.moveSnake.bind(this);\n    this.checkIfBorderCrossing = this.checkIfBorderCrossing.bind(this);\n    this.checkIfEatItself = this.checkIfEatItself.bind(this);\n    this.checkIfEatFood = this.checkIfEatFood.bind(this);\n    this.enlargeSnake = this.enlargeSnake.bind(this);\n    this.increaseSpeed = this.increaseSpeed.bind(this);\n    this.increaseScore = this.increaseScore.bind(this);\n    this.gameOver = this.gameOver.bind(this);\n    \n  }\n  \n\n  // Check some conditions on each component update\n  // Stop the game when needed\n  componentDidUpdate() {\n    this.checkIfBorderCrossing();\n    this.checkIfEatItself();\n    this.checkIfEatFood();\n  }\n\n  selectSpeed = (eventKey) => {\n    if (eventKey === '1') { this.setState({ speed: 200, speedButtonName: 'Low' }) }\n    if (eventKey === '2') { this.setState({ speed: 150, speedButtonName: 'Medium' }) }\n    if (eventKey === '3') { this.setState({ speed: 100, speedButtonName: 'Fast' }) }\n  }\n\n  startButton() {\n    if (this.state.speedButtonName === \"Select the speed\") {\n      alert(\"Please, select the speed\")\n      return\n    } \n    let i = setInterval(this.moveSnake, this.state.speed);\n    this.setState({ intervalId: i, ifSpeedSelectDisabled: true})\n    document.body.onkeydown = this.onKeyPress;\n  }\n\n\n  onKeyPress = (e) => {\n    // \"|| window.event\" is to make it work on old versions of IE (pre IE9) where the event was not passed into the handler function.\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 37:\n        this.setState({ direction: \"LEFT\" });\n        break;\n      case 38:\n        this.setState({ direction: \"UP\" });\n        break;\n      case 39:\n        this.setState({ direction: \"RIGHT\" });\n        break;\n      case 40:\n        this.setState({ direction: \"DOWN\" });\n        break;\n      default:\n        return;\n    }\n  }\n\n  // The algorithm of moving the snake.\n  moveSnake = () => {\n    let snake = [...this.state.snakeCoordinates];\n    let head = snake[snake.length - 1];\n    switch (this.state.direction) {\n      case \"RIGHT\":\n        head = [head[0] + 2, head[1]];\n        break;\n      case \"LEFT\":\n        head = [head[0] - 2, head[1]];\n        break;\n      case \"DOWN\":\n        head = [head[0], head[1] + 2];\n        break;\n      case \"UP\":\n        head = [head[0], head[1] - 2];\n        break;\n      default:\n        return;\n    }\n    // The movement is achieved by adding a new head in the selected direction\n    // and removing the tail.\n    snake.push(head);                    \n    snake.shift();\n    this.setState({ snakeCoordinates: snake })\n  }\n\n  // Check and stops the game in case if the snake touchs the border\n  checkIfBorderCrossing() {\n    let snake = [...this.state.snakeCoordinates];\n    let head = snake[snake.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.gameOver();\n    }\n  }\n\n  // Checks if the snake eats itself\n  // Stops the game in case if the snake eats itself\n  checkIfEatItself() {\n    let snake = [...this.state.snakeCoordinates];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(coord => {\n      if (head[0] === coord[0] && head[1] === coord[1]) {\n        this.gameOver();\n      }\n    })\n  }\n\n  // Checking if snake eats food (if snake's head and food coordinates are the same).\n  // Increase the snakes size, speed and user's score\n  checkIfEatFood() {\n    let snake = [...this.state.snakeCoordinates];\n    let head = snake[snake.length - 1];\n    let food = this.state.food;\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: randomCoordinates()\n      })\n      this.enlargeSnake();\n      this.increaseSpeed();\n      this.increaseScore();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeCoordinates];\n    newSnake.unshift([]);\n    this.setState({ snakeCoordinates: newSnake })\n  }\n\n  increaseSpeed = () => {\n    if (this.state.speed > 10) {\n      let s = this.state.speed - 10\n      clearInterval(this.state.intervalId);\n      let i = setInterval(this.moveSnake, s)\n      this.setState({ speed: s, intervalId: i })\n    }\n  }\n\n  increaseScore() {\n    this.setState({ score: this.state.score + 1 })\n  }\n\n  gameOver() {\n    alert(`Game Over. your score is ${this.state.score}`);\n    clearInterval(this.state.intervalId);\n    this.setState(initState)\n  }\n\n  render() {\n    return (\n      <div className='div'>\n        <GameRules />\n        <DropdownButton className='dropdown' title={this.state.speedButtonName} disabled={this.state.ifSpeedSelectDisabled}>\n          <Dropdown.Item eventKey='1' onSelect={this.selectSpeed}>Low</Dropdown.Item>\n          <Dropdown.Item eventKey='2' onSelect={this.selectSpeed}>Medium</Dropdown.Item>\n          <Dropdown.Item eventKey='3' onSelect={this.selectSpeed}>Fast</Dropdown.Item>\n        </DropdownButton>\n        <button  onClick={() => this.startButton()}>Start game!</button>\n        <h1>Score: {this.state.score}</h1>\n        <div className=\"game-area\">\n          <Snake snakeCoordinates={this.state.snakeCoordinates} />\n          <Food coord={this.state.food} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}